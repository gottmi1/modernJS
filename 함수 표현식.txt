자바스크립트는 함수를 특별한 종류의 값으로 취급한다.
다른 언어에서처럼 특별한 동작을 하는 구조로 취급되지 않는다.

이전 챕터에서 아래와 같이 함수 선언, 함수 선언문 방식으로 함수를 만들었다.
function sayHi() {
  alert("say Hi");
}
 
함수 선언 방식 외에 함수 표현식을 사용해 함수를 만들 수 있다.

let sayHi = function() {
  alert('hello');
}

함수를 생성하고 변수에 값을 할당하는 것처럼 함수가 변수에 할당되었다.

함수가 어떤 방식으로 만들어졌는지에 관계없이 함수는 값이고, 따라서 변수에 할당할 수 있다.

위 예시에서 행한 일은 함수를 만들고 sayHi라는 변수에 할당한 것

if { ... }, for { }, function f { }을 제외한 모든 구문에는 세미콜론을 붙이는 것이 좋다.



- 콜백 함수

함수를 값처럼 전달하는 예시, 함수 표현식에 관한 예시를 좀 더 살펴보자

function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

function showOk() {
  alert( "동의하셨습니다." );
}

function showCancel() {
  alert( "취소 버튼을 누르셨습니다." );
}

// 사용법: 함수 showOk와 showCancel가 ask 함수의 인수로 전달됨
ask("동의하십니까?", showOk, showCancel);

함수 ask의 인수, showOk와 showCancel은 콜백함수 또는 콜백이라고 불린다.
함수를 함수의 인수로 전달하고, 필요하다면 인수로 절다한 그 함수를 "나중에 호출(called back)"하는 것이 콜백함수의 개념이다.
위 예시에서는 사용자가 yes라고 답한 경우 showOk가 콜백되고, no라고 답한경우 showCancel이 콜백된다.
아래와 같이 합수 표현식을 사용하면 코드가 짧아진다.

function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "동의하십니까?",
  function() { alert("동의하셨습니다."); },
  function() { alert("취소 버튼을 누르셨습니다."); }
);

ask 내부의 이름 없이 선언된 함수가 익명함수이다.
익명함수는 변수가 할당된게 아니기 때문에 ask밖에서는 접근할 수 없다.
위 예시는 의도를 가지고 구현한 것이기 때문에 바깥에서 접근할 수 없어도 문제가 없다.


 - 함수 표현식 vs 함수 선언문

함수 표현식과 선언문의 차이에 대해 알아보자
첫번 째는 문법이다. 

함수 선언문
function sum(a, b) {
 return a + b;
}

함수 표현식
let sum = function(a, b) {
  return a + b;
};

두번쨰 차이는 자바스크립트 엔진이 언제 함수를 생성하는지다.

함수 표현식은 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성한다.
따라서 실행 흐름이 함수에 도달했을 때부터 해당 함수를 사용할 수 있다.

그러나 함수 선언문은 함수 선언문이 정의되기 전에도 호풀할 수 있다.
따라서 전역 함수 선언문은 스크립트 어디에 있느냐에 상관없이 어디에서든 사용이 가능하다.

자바스크립트 내부의 알고리즘 때문인데, 스크립트를 실행하기 전, 준비단계에서 전역에 선언된 함수 선언문을 찾고 해당 함수를 생성한다.
스크립트가 실행되기 전 초기화 단계에서 함수 선언 방식으로 정의한 함수가 생성되는 것이다.

함수 선언문이 모두 처리된 후에 스크립트가 실행되기 때문에, 스크립트 어디서든 함수 선언문으로 선언한 함수에 접근할 수 있는 것이다.

sayHi("John"); // Hello, John

function sayHi(name) {
  alert( `Hello, ${name}` );
}
함수 선언문의 경우 스크립트 내 어디에서든 접근할 수 있다.

sayHi("John"); // error!

let sayHi = function(name) {  //
  alert( `Hello, ${name}` );
};
하지만 함수 표현식은 실햄 흐름이 표현식에 다다랐을 때 만들어진다.


세 번째 차이점은 스코프이다.(엄격모드일 경우 한정, 엄격모드가 아닐 경우 둘 다 접근가능.)

엄격 모드에서 블록 내의 함수 선언문은 블록 내 어디서든 접근할 수 있지만, 블록 밖에서는 함수에 접근할 수 없다.(블럭스코프)


함수 표현식은 if 문 밖에 선언한 변수에 함수 표현식으로 만든 함수를 할당하면 블록 바깥에서도 접근이 가능하다.


함수 선언문과 함수 표현식 중 무엇을 선택해야 하는가?

함수 선언문을 이용해 함수를 선언하는 걸 먼저 고려하는 것이 좋다.
함수 선언문으로 함수를 정의하면, 함수가 선언되기 전에 호출할 수 있어 코드 구성이 조금 더 자유로워진다.
함수 선언문을 사용하면 가독성도 좋아진다.
코드에서 let f = func... 보다 function f(){}...을 찾는 것이 더 쉽다.


요약 

1. 함수는 값이다. 따라서 함수도 값처럼 할당,복사,선언할 수 있다.
2. 함수 선언 방식으로 함수를 생성하면 함수가 돕립된 구문 형태로 존재하게 된다.
3. 함수 표현식 방식으로 함수를 생성하면 함수가 표현식의 일부로 존재하게 된다.
4. 함수 선언문을 코드 블록이 실행되기도 전 준비단계에서 처리된다.
5. 함수 표현식은 실햄 흐름이 표현식에 다다랐을 때 만들어진다.