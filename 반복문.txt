
반복문 본문이 한 번 실행되는 것을 반복(iteration, 이터레이션)이라고 부른다.

while문 문법

while (조건) {
  이터레이션
}
조건은 while에 의해 평가되고, 평가 후 불린값으로 변경됨.
반복이 시작되기 전에 조건을 확인

do...while 문법

do{
  이터레이션
} while (조건)
반복이 끝난 후에 조건을 확인

이 문법을 사용하면 조건을 반복문 본문 아래로 옮길 수 있다.
이 문법은 조건이 truthy인지 아닌지에 상관없이 본문을 최소한 한 번은 실행하고 싶을 때만 사용해야 한다. 잘 안 쓰인다.


반복문 빠져나오기

대개 반복문의 조건이 falsy가 되면 반복문이 종료되지만 break를 사용하면 언제든 원하는 때에 빠져나올 수 있음.
break일 때 반복문이 즉시 중단되고 제어 흐름이 반복문 아래 첫 번째 줄로 이동함.
반복문의 시작 지점이나 끝 지점에서 조건을 확인하는 것이 아니라, 본문 가운데 혹은 본문 여러 곳에서 조건을 확인해야 하는 경우, "무한 반복문 + break"조합이 좋다.

continue

break의 가벼운 버전이다. 전체 반복문을 멈추지 않지만 현재 싱핼중인 이터레이션을 멈추고 반복문이 다음 이터레이션을 강제로 실행시키도록 함.

for (let i = 0; i < 10; i++) {

  // 조건이 참이라면 남아있는 본문은 실행되지 않습니다.
  if (i % 2 == 0) continue;

  alert(i); // 1, 3, 5, 7, 9가 차례대로 출력됨
}
예제는 i가 짝수 일때 본문 실행을 중단시키고 다음 이터레이션이 실행되게 한 것이다.

무한반복문은 보통 while(true)를 이용해 만든다.


switch문

복수의 if 조건문은 switch문으로 바꿀 수 있음.
스위치문을 사용한 비교법은 특정 변수를 다양한 상황에서 비교할 수 있게 해준다.
코드 자체가 비교 상황을 잘 설명한다는 장점도 있다.

문법 switch문은 하나 이상의 case로 구성된다. 대게 default문(else와 같음)도 있지만 필수는 아님.

[예시]
let a = 2 + 2;

switch (a) {
  case 3:
    alert( '비교하려는 값보다 작습니다.' );
    break;
  case 4:
    alert( '비교하려는 값과 일치합니다.' );
    break;
  case 5:
    alert( '비교하려는 값보다 큽니다.' );
    break;
  default:
    alert( "어떤 값인지 파악이 되지 않습니다." );
}

각각의 상황에 대해 따로 값을 줄 수 있다.

case문 안에 break문이 없으면 조건에 부합하는지 여부를 따지지 않고 이어지는 case를 실행함

다른 상황에 같은 값을 주고싶다면 case문을 묶을수도 있다.
case 3:
case 5:
  alert('ㅁㄴㅇㅁㄴㅇ')
  break;
  
  이런식으로 하면 case3,case5인 상황 모두 경고창에 ㅁㄴㅇㅁㄴㅇ를 띄움.