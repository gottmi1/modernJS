
타입스크립트의 자료형은 다음과 같다

boolean
number
string
array
object
튜플
enum
any
void
null과 undefined
never

boolean
자바스크립트와 마찬가지로 true또는 false가 될 수 있는 값을 정의한다.

const active: boolean = true;

number
자바스크립트와 마찬가지로 10진 16진 2진 8진 리터럴을 지원한다.
const decimal: number = 9;
const hex: number = 0xf00d;
const binary: number = 0b1010;
const octal: number = 0o744;

string
텍스트 형태의 데이터를 정의
const message: string = "Welcome";

Array
Array 자료형을 정의하는 방법은 두 가지가 있다.

첫번쨰 방법 -> type []
const firstArray: number[] = [1,2,3];

두번쨰 방법 -> Array<type>
const secondArray: Array<number> = [4,5,6];

이런 간단한 경우에는 두 가지 방법의 차이가 없지만 다음 예제처럼 숫자 자료형보다 더 복잡한 자료형이 사용될 경우 첫번쨰 표기법은 사용될 수 없다.

// label, value 속성을 가진 객체의 배열을 인수로 받는 함수
function example: Array<[label:string , value:string]> {
  //뭔가 작업을 수행
}

Array<[label: string, value: string]> 은 label,value 둘 다 string 자료형을 가진 객체의 배열임을 뜻한다.


object
타입스크립트의 객체(소문자 o)는 원시 자료형이 아닌 모든 자료형 값을 가리킨다.
여러 속성을 포함할 수 있으며 속성값은 원시 자료형, 객체, 함수등이 될 수 있다.

어떤 함수의 인수가 객체 자료형을 받는다고 가정해보자.

function greetUser(user: object) {
  // name 속성이 object 자료형에는 정의되어 있지 않음.
  console.log(`hello ${user.name}`);
} 
greetUser({name : "albert", age: 27});

타입스크립트 컴파일러는 접근하려는 속성 이름이 object 자료형에 존재하지 않는다고 오류를 발생시킨다.
이 문제를 해결하기 위해 해당 객체의 속성을 더 자세히 정의해야 한다.

function greetUser(user: {name : string , age: number}) {
  // name 속성이 object 자료형에는 정의되어 있지 않음.
  console.log(`hello ${user.name}`);
} 
greetUser({name : "albert", age: 27});
// hello albert

객체의 모든 속성을 명시적으로 지정한 덕에 코드를 보는 모든 사람이 해당 객체로 무엇을 할 수 있고 무엇을 할 수 없는지 쉽게 알 수 있다.


튜플

튜플을 사용하면 배열의 원소에 자료형을 정의할 수 있다.
let myTuple: [string,number,string];
myTuple = ['hi',5,'hello'];

console.log(myTuple);
// ['hi',5,'hello'];

enum
열거형 enum을 이용하면 숫자 집합에 이름을 부여할 수 있다.

enum Status {deleted, pending, active};

const blogPostStatus = Status.active;

console.log(blogPostStatus);
// 2

열거형 내부의 값은 0부터 시작하므로 차례대로 0,1,2이다.

이러한 코드에서는 블로그 게시물의 상태를 표현할 때 2가 아닌 active라고 말하는 것이 훨씬 더 가독성이 좋다.
다음과 같이 시작값을 지정하여 열거 자료형의 숫자를 원하는 값부터 할당할 수도 있다.

enum Status {deleted= -1, pending, active};

const blogPostStatus = Status.active;

console.log(blogPostStatus);
// 1
이렇게 하면 차례대로 -1,0,1이 된다.
물론 숫자를 이용하여 열거 자료형의 값에 접근할 수도 있다.
enum Status {deleted= -1, pending, active};
console.log(Status[0]);
// pending


any

이름에서 알 수 있듯 any는 특정 변수의 값이 무엇이든 될 수 있음을 의미한다.
서드 파티 라이브러리가 타입스크립트를 지원하지 않는 경우, 
또는 자바스크립트에서 기존 코드를 활용하면서도 부분적으로 타입스크립트를 적용할 떄 사용할 수 있다.
any는 존재하지 않을수 있는 속성과 메서드에 접근할 수 있도록 허용한다.

자료형의 일부만 알고있는 경우에도 any를 사용할 수 있다.

let firstUser: Object<any> = {
  name : 'albert',
  age : 27,
};

let secondUser: Object<any> = {
  name : 'Caroline',
}

두 변수 모두 object 자료형이 될 것으로 예상되지만, 그 속성이 확실하지 않으므로 any를 사용했다.

void
이름에서 알 수 있듯이 void는 자료형이 없음을 정의한다.

다음과 같은 시나리오에서 자주 사용된다.

function storeValueInDatabase(objectToStore): void {
  // 데이터베이스 값을 저장
}

이 함수는 객체를 받아서 데이터베이스에 저장하지만, 아무것도 반환하지 않기 떄문에 반환값을 void로 지정했다.
void 자료형의 변수를 선언할 때는 null과 undefined만 할당 가능하다

null과 undefined
void와 마찬가지로, null 또는 undefined 자료형의 변수를 만드는 것은 그다지 유용하지 않다.
null 및 undefined값만 할당할 수 있기 떄문이다.

뒤에서 유니언 자료형에 대해 이야기할 때 이 두 자료형을 어떻게 사용하는지 다시 살펴보자


never 

never는 절대 발생하지 않는 값이다.
예를 들어 반환을 아예 하지 않거나 항상 오류를 발생시키는 함수에 사용할 수 있다.

function throwError(error : string): never {
  throw new Error(error);
}